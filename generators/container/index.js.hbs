
/**
 *
 * {{properCase name }}
 *
 */

{{#if wantHooks}}
import React, { 
//useState, 
//useEffect, 
//useContext,
} from 'react';
{{else}}
import React from 'react';
{{/if}}
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { useTranslation } from 'react-i18next';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
{{#if wantRoute}}
import { withRouter } from 'react-router-dom'
{{/if}}
import { compose } from 'redux';

{{#if wantSaga}}
import { useInjectSaga } from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import { useInjectReducer } from 'utils/injectReducer';
import { makeSelect{{properCase name}}State, makeSelectLoading, makeSelectError} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantRoute}}
import routeTemplates from 'utils/routeTemplates';
{{/if}}


export const {{ properCase name }} = (props) => {
  {{#if wantMessages}}
  // @dev args for t('key', 'text')
  const { t, i18n } = useTranslation();
  {{/if}}
  {{#if wantActionsAndReducer}}
  // @dev useInjectReducer should always be after hooks function
  useInjectReducer({ key: '{{ camelCase name }}', reducer });
  {{/if}}
  {{#if wantSaga}}
  // @dev useInjectSaga should always be after hooks function
  useInjectSaga({ key: '{{ camelCase name }}', saga });
  {{/if}}

  return (
    <div>
    {{#if wantHeaders}}
      <Helmet>
        <title>{{properCase name}}</title>
        <meta name="description" content="Description of {{properCase name}}" />
      </Helmet>
    {{/if}}
    {{#if wantMessages}}
      {/* @dev remember to add prefix to 'key' args */}
      <h1>{t('{{ dashCase }}-title', '{{ properCase name }}')}</h1>
    {{/if}}
    </div>
  );
}

{{ properCase name }}.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = (state,props) => {
  // Selecting state from store
  const structuredSelector = createStructuredSelector({
    {{ camelCase name }}: makeSelect{{properCase name}}State(),
    loading: makeSelectLoading(),
    error: makeSelectError()
  })

  return {
    structuredSelector
  }
} 
{{/if}}

const mapDispatchToProps = (dispatch) => {
  return {
    dispatch,
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}

export default compose(
  {{#if wantRoute}}
  withRouter,
  {{/if}}
  withConnect,
)({{ properCase name }});